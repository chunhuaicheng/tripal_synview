<?php

/**
 * @file
 * @todo Add file header description
 */

/*******************************************************************************
 * This function will process the synteny file and load the blocks into chado
 * feature tables and synblock table
 *
 * @param $syn_org1
 *   The organism id for the left blocks and genes
 * @param $syn_org2
 *   The organism id for the right blocks and genes
 *   Notice: the genome1 and genome2 could be same
 * @param $syn_path
 *   The full path of synteny file generated by MCScanX
 *   Notice: this synteny file should be processed by in-house perl 
 * 
 * @param $job_id
 *   The job id passed in from the jobs management system
 * 
 * @return
 *   returns 1 for success, 0 for failure
 */
function synview_parse_synfile($syn_org1, $syn_org2, $syn_path) {

  // check cvterm
  $sql = "SELECT * FROM {cv} WHERE name = :cvname";
  $cv = chado_query($sql, array(':cvname' => 'sequence'))->fetchObject();
  if (!$cv) {
    tripal_report_error('tripal_synview', TRIPAL_ERROR,
      "Cannot find the 'sequence' ontology", array());
    return '';
  }

  $terms = array(
    'syntenic_region' => NULL, 
    'paralogous_to' => NULL, 
    'orthologous_to' => NULL, 
    'member_of' => NULL,
    'gene' => NULL,
    'mRNA' => NULL,
    'CDS' => NULL
  );
  foreach ($terms as $name => $term_id) {
    $cvterm = chado_select_record('cvterm', array('cvterm_id'), array('name'=>$name, 'cv_id'=>array('name' => 'sequence')));
    if (count($cvterm) ==  0) {
      tripal_report_error('tripal_synview', TRIPAL_ERROR,
        "Cannot find the ':name' cvterm", array(':name'=>$name));
      return '';
    }
    $terms[$name] = $cvterm[0]->cvterm_id;
  }

  // check the syntenic file
  $syn_data = synview_check_synfile($syn_org1, $syn_org2, $syn_path, $terms);

  // determine paralog or otholog
  $rel_type = $terms['orthologous_to'];
  if ($syn_org1 == $syn_org2 ) {
    $rel_type = $terms['paralogous_to'];
  }

  // load block to chado database
/*   $transaction = db_transaction();
  print "\nNOTE: Loading of synteny file is performed using a database transaction. \n" .
     "If the load fails or is terminated prematurely then the entire set of \n" .
     "insertions/updates is rolled back and will not be found in the database\n\n"; */
  try {
    if (count($syn_data) > 0 ) {

      $total_blk = count($syn_data);
      $num = 0;
      $uniq_gene_pair = array();

      foreach ($syn_data as $block) {

        // insert left and right feature and featureloc
        $vleft = array(
          'organism_id' => $syn_org1,
          'name'        => $block['left'],
          'uniquename'  => $block['left'],
          'type_id'     => $terms['syntenic_region'],
          'is_analysis' => 'FALSE',
          'is_obsolete' => 'FALSE',
        );
        
        $fleft = (object) chado_insert_record('feature', $vleft);     
        if (!$fleft) {
          tripal_report_error("tripal_synview", TRIPAL_WARNING, "Failed to insert left syntenic_region :blk1 to feature ", array(':blk1'=>$block['left']));
          return 0;
        }

        $vleft_loc = array(
          'feature_id'    => $fleft->feature_id,
          'srcfeature_id' => $block['ref1'][1],
          'fmin'          => $block['start1'],
          'fmax'          => $block['end1'],
          'strand'        => $block['strand1'], 
        );

        $fleft_loc = (object) chado_insert_record('featureloc', $vleft_loc);
        if (!$fleft_loc) {
          tripal_report_error("tripal_synview", TRIPAL_WARNING, "Failed to insert left syntenic_region ':blk1' to featureloc", array(':blk1'=>$block['right']));
          return 0;
        }

        $vright = array(
          'organism_id' => $syn_org2,
          'name'        => $block['right'],
          'uniquename'  => $block['right'],
          'type_id'     => $terms['syntenic_region'],
          'is_analysis' => 'FALSE',
          'is_obsolete' => 'FALSE',
        );

        $fright = (object) chado_insert_record('feature', $vright);
        if (!$fright) {
          tripal_report_error("tripal_synview", TRIPAL_WARNING, "Failed to insert right syntenic_region ':blk2' to feature", array(':blk2' =>$block['right']));
          return 0;
        }

        $vright_loc = array(
          'feature_id'    => $fright->feature_id,
          'srcfeature_id' => $block['ref2'][1],
          'fmin'          => $block['start2'],
          'fmax'          => $block['end2'],
          'strand'        => $block['strand2'],
        );

        $fright_loc = (object) chado_insert_record('featureloc', $vright_loc);
        if (!$fright_loc) {
          tripal_report_error("tripal_synview", TRIPAL_WARNING, "Failed to insert right syntenic_region ':blk2' to featureloc", array(':blk2' =>$block['right']));
          return 0;
        }

        $vrel = array(
          'subject_id' => $fleft->feature_id,
          'object_id'  => $fright->feature_id,
          'type_id'    => $rel_type, 
        );

        $frel = (object) chado_insert_record('feature_relationship', $vrel);
        if (!$frel) {
          tripal_report_error("tripal_synview", TRIPAL_WARNING, "Failed to insert ':blk1' and ':blk2' to feature_relationship ", array(':blk1' => $block['left'], ':blk2' =>$block['right'] ));
          return 0; 
        }

        // add block to database
        $insert_blk = db_insert('synblock')->fields(array(
         'blockid' => $block['id'],
         'b1'      => $fleft->feature_id,
         'b2'      => $fright->feature_id,
         'score'   => $block['score'],
         'evalue'  => $block['evalue'],
         'value'   => $block['value'],
        ))->execute();

        // add relation ship for gene1 and gene2
        $gene1 = $block['gene1'];
        $gene2 = $block['gene2'];

        for($i = 0; $i < count($gene1); ++$i)  {
          if (strcmp($gene1[$i][0],'NA') != 0 and strcmp($gene2[$i][0],'NA') != 0 ) {
            $key = $gene1[$i][0] . "#" . $gene2[$i][0];
            if (!array_key_exists($key, $uniq_gene_pair)) {

              $value_grel = array(
                'subject_id' => $gene1[$i][1],
                'object_id'  => $gene2[$i][1],
                'type_id'    => $rel_type,
              );
              $grel = (object) chado_insert_record('feature_relationship', $value_grel);
              if (!$grel) {
                //$umatch = array('feature_relationship_id' => '');
                //$result = chado_update_record('feature_relationship',$umatch,$value_grel);
                tripal_report_error("tripal_synview", TRIPAL_WARNING, "Failed to insert ':g1' and ':g2' to feature_relationship ", array(':g1' => $gene1[$i][0], ':g2' =>$gene2[$i][0] ));
                //print "Gene relationship has been exist\n";
                return 0; 
              }
              $uniq_gene_pair[$key] = 1; 
            } 
          }
         
          if (strcmp($gene1[$i][0],'NA') != 0) {
            $value_m1 = array(
              'subject_id' => $gene1[$i][1],
              'object_id'  => $fleft->feature_id,
              'type_id'    => $terms['member_of'],
            );
            
            $gm1 = (object) chado_insert_record('feature_relationship', $value_m1);
            if (!$gm1) {
              tripal_report_error("tripal_synview", TRIPAL_WARNING, "Failed to insert ':g1' and to feature_relationship ", array(':g1' => $gene1[$i][0]));
              //print "Gene relationship has been exist\n";
              return 0; 
            }    
          }

          if (strcmp($gene2[$i][0],'NA') != 0) {
            $value_m2 = array(
              'subject_id' => $gene2[$i][1],
              'object_id'  => $fright->feature_id,
              'type_id'    => $terms['member_of'],
            );
            
            $gm2 = (object) chado_insert_record('feature_relationship', $value_m2);
            if (!$gm2) {
              tripal_report_error("tripal_synview", TRIPAL_WARNING, "Failed to insert ':g2' and to feature_relationship ", array(':g2' => $gene2[$i][0]));
              //print "Gene relationship has been exist\n";
              return 0; 
            }    
          }
        }

        ++$num;
        print "Parsing block " . $num . " of " . $total_blk . ". Memory: " .
          number_format(memory_get_usage()) . " bytes.\r";
      } // end blk loop
    }
  }
  catch (Exception $e) {
    print "\n"; // make sure we start errors on new line
    watchdog_exception('T_synfile_loader', $e);
/*     $transaction->rollback();
    print "FAILED: Rolling back database changes...\n"; */
  }
  print "\nDone.\n";
  return;
}

/*****************************************************************************
 * This function will check the format of syn file before loading to database
 *
 * @param $syn_org1
 * 
 * @param $syn_org2
 *
 * @param $syn_path
 *
 * @param $terms
 *   array of required cvterm_id for synview 
 * @return 
 *   return array for loading to database 
 */
function synview_check_synfile($syn_org1, $syn_org2, $syn_path, $terms) {

  print "\nNOTE: Checking the synteny file: \n" . 
     "  " . $syn_path . "\n";

  if (!is_readable($syn_path)) {
    exit("Could not open the synteny file '$blastfile'.\n");
  }  
 
  // structure of syn_data
  // array of block
  //   blockID, score, evalue, value, leftID, ref1, start1, end1, gene1, rightID, ref2, start2, end2, gene2
  //    the gene1 and gene2 are array of genes belong to this block

  // check if the leftRef, gene1, gene2, gene3 are exist in feature and is part of leftRef for org1
  // check same for org2
  // report error if any gene or chr is not exist

  // check if the leftID or rightID is exist in feature for org1 and org2
  // report error if any of them is exist

  // check if the block id exist in synblock table
  // report error if any of the exist
  $syn_data = array();
  $block = array(
     'id' => NULL, 'score' => NULL, 'evalue' => NULL, 'value' => NULL,
     'left' => NULL, 'ref1' => NULL, 'start1' => NULL, 'end1' => NULL, 'strand1' => NULL, 'gene1' => array(),
     'right' => NULL,'ref2' => NULL, 'start2' => NULL, 'end2' => NULL, 'strand2' => NULL, 'gene2' => array()
  );
  $blk_value = '';

  $fp = fopen($syn_path,'r');
  if (!$fp) {
    tripal_report_error('tripal_synview', TRIPAL_ERROR, "cannot open file: %dfile",
      array('%dfile' => $syn_path));
    return 0;
  }

  while (($line = fgetcsv($fp, 0, "\t")) !== FALSE) {
    if ($line[0] == "##org1") {

    } 
    elseif ($line[0] == "##org2") {

    }
    elseif ($line[0] == "#BK") {
      //code for parse previous BK: block
      $block['value']  = $blk_value;

      if (!empty($blk_value)) {
        $syn_data[] = $block;
        //break; //for debug
      }

      //clean block
      foreach ($block as $key => $value) {
        if ($key == 'gene1' or $key == 'gene2') {
          $block[$key] = array();
        } else {
          $block[$key] = NULL;
        }
      }
      $blk_value = ''; 

      //code for start new BK: block
      $block['id']     = $line[1];
      $block['score']  = $line[2];
      $block['evalue'] = $line[3];

      $synblk = db_query('SELECT blockid FROM {synblock} WHERE blockid=:block_id ', array(':block_id' => $line[1]))->fetchObject();
      if (!empty($synblk)) {
        print "\nFAILED: the block $line[1] has already exist in synblock table\n";
        //exit; 
      }
    }
    elseif ($line[0] == "#BL") {
      $fid_syn = chado_check_feature_exist($syn_org1, $line[1], $terms['syntenic_region'], 0);
      $fid_ref = chado_check_feature_exist($syn_org1, $line[2], '', 1);
      $block['left']    = $line[1];
      $block['ref1']    = array($line[2], $fid_ref);
      $block['start1']  = $line[3];
      $block['end1']    = $line[4];
      $block['strand1'] = $line[5] == '+' ? 1 : -1;
    } 
    elseif ($line[0] == "#BR") {
      $fid_syn = chado_check_feature_exist($syn_org2, $line[1], $terms['syntenic_region'], 0);
      $fid_ref = chado_check_feature_exist($syn_org2, $line[2], '', 1);
      $block['right']   = $line[1];
      $block['ref2']    = array($line[2], $fid_ref);
      $block['start2']  = $line[3];
      $block['end2']    = $line[4];
      $block['strand2'] = $line[5] == '+' ? 1 : -1;
    }
    elseif (sizeof($line) > 4) {
      //$block['gene1'][] = $line[2];
      //$block['gene2'][] = $line[3];
      $blk_value .= $line[2] . "\t" . $line[3] . "\t" . $line[4] . "\n";

      if ($line[2] != 'NA') {
        $ftype1 = variable_get('tripal_synview_feature_type1', 'mRNA');
        $fid = chado_check_feature_exist($syn_org1, $line[2], $terms[$ftype1], 1);
        $block['gene1'][] = array($line[2], $fid);
      } else {
        $block['gene1'][] = array($line[2], 'NA');
      }

      if ($line[3] != 'NA') {
        $ftype2 = variable_get('tripal_synview_feature_type2', 'mRNA');
        $fid = chado_check_feature_exist($syn_org2, $line[3], $terms[$ftype2], 1);
        $block['gene2'][] = array($line[3], $fid);
      } else {
        $block['gene2'][] = array($line[3], 'NA');
      }
    }
  }
  fclose($fp);

  // last block
  $block['value']  = $blk_value;
  $syn_data[] = $block;

  return $syn_data; 
}

/** 
 * This function determine if the feature exist in chado
 *
 * @param $org_id
 *   the organims id in chado organism table
 * @param $name
 *   the uniquename in feature table
 * @param $pass
 *   0 or 1, used for pass the check 
 *   1: the name exist in feature table, pass; otherwise, exit with error
 *   0. the name not exist in feature, pass; otherwise, exit with error
 */  
function chado_check_feature_exist ($org_id, $name, $type_id, $pass) {

  $feature = NULL;
  if (empty($type_id)) {
    $feature = chado_select_record('feature', array('feature_id'), 
      array('organism_id'=>$org_id, 'uniquename'=>$name)
    );
  }
  else {
    $feature = chado_select_record('feature', array('feature_id'), 
      array('organism_id'=>$org_id, 'uniquename'=>$name, 'type_id'=>$type_id)
    );
  }
 
  $pass_value = 1;

  $feature_id = 'NA';
  if (count($feature) == 0) {
    $pass_value = 0;
  } else {
    $feature_id = $feature[0]->feature_id;
  }

  if ($pass_value != $pass) {
    print "\nFAILED: can not pass feature check $org_id $name $pass ...\n";
    exit; 
  }

  return $feature_id;
}
