<?php

/**
 * @file
 * The main file for the tripal go module.
 */

// Application Programmers Interface
require_once 'api/synview.api.inc';

// insert/delete synteny blocks according to synteny file 
require_once 'includes/synview.syn_parser.inc';

// synteny Node functionality
require_once 'includes/synview.node.inc';

// Functions specific to themeing (ie: preprocess)
require_once 'theme/synview.theme.inc';

// Administration for furture
//require_once 'includes/synview.admin.inc';

/**
 * Implements hook_menu().
 */
function synview_menu() {
  // search syntenic block form
  $items['synview/search'] = array(
    'title' => 'Search Syntenic Blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('synview_search_form'),
    'access arguments' => array('access content'),
    'file' => 'includes/synview_search_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // display search result
  $items['synview/search/result'] = array(
    'title' => 'Search Result for Syntenic Blocks',
    'page callback' => 'synview_search_result',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // synteny (MCScanX) dataset Node 
  $items['node__syn'] = array(
    'template' => 'node--syn',
    'render element' => 'node',
    'base hook' => 'node',
    'path' => 'themesyn',
  );

  // Display Syntenic Block
  $items['synview/block/%'] = array(
    'title' => 'Display Syntenic Blocks',
    'page callback' => 'display_block',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // help
  $items['admin/tripal/extension/tripal_synview/help'] = array(
    'title' => 'Help',
    'page callback' => 'theme',
    'page arguments' => array('synview_help'),
    'access arguments' => array('administer tripal'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function synview_theme() {

  $items = array();
  $path = drupal_get_path('module', 'synview');

  // explain the detail
  // this hook create a array of theme through array item
  // the key in array is like show_goenrich_report
  // the value tell drupal where to find template page 
  //   template: template name, and file must has suffix .tpl.php 
  //   path: where to find template file 
  // use theme('key') to call the them

  // search result
  $items['synview_search_result'] = array(
    'template' => 'synview_search_result',
    'path' => "$path/theme",
  );


  // Displays the pwy enrich results for each job
  $items['display_block'] = array(
    'template' => 'display_block',
    'path' => "$path/theme",
  );

  // Module Help
  $items['synview_help'] = array(
    'template' => 'synview_help',
    'path' => "$path/theme",
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function synview_help($path, $arg) {
  if ($path == 'admin/help#synview') {
    return theme('synview_help');
  }
}

/**
 * Dispaly single block 
 *
 * @param $block_id
 *
 * @return $result
 *  Return HTML output of the block to be displayed to the user
 *
 */
function display_block($block_id) {
  return theme('display_block', array('block_id' => $block_id));
}

/**
 * retrieve blocks from drupal database according to location
 * 
 * @param org_id chr start end array_of_ref_org_id
 * 
 * @return $block
 *         array of searched blocks
 */
function synview_search_result() {

  if (!array_key_exists('tripal_synview_search', $_SESSION)) {
    drupal_goto('synview/search');
  }

  $org_id  = $_SESSION['tripal_synview_search']['SELECT_GENOME'];
  $chr     = $_SESSION['tripal_synview_search']['SELECT_CHR'];
  $start   = $_SESSION['tripal_synview_search']['START'];
  $end     = $_SESSION['tripal_synview_search']['END'];
  $ref_org = $_SESSION['tripal_synview_search']['REFORG'];

  $org_opts = get_organism_options();

  // search block on one organism of select chrosome
  // only find block between start and end, will change this selection later to 
  // find the overlapped region
  $args = array( 
    ':type_name' => 'syntenic_region',
    ':org_id' => $org_id, 
    ':chr' => $chr
  );

  $where_location = "AND 
    ((FL.fmin < :start AND FL.fmax > :start) OR 
     (FL.fmin < :end AND FL.fmax > :end) OR 
     (FL.fmin > :start AND FL.fmax < :end)
    )";
  $args[':start'] = $start;
  $args[':end'] = $end;

  $sql = "SELECT F.feature_id, F.name, FL.srcfeature_id, FL.fmin, FL.fmax, FL.strand FROM chado.feature F
     LEFT JOIN chado.cvterm CVT ON F.type_id = CVT.cvterm_id 
     LEFT JOIN chado.featureloc FL ON F.feature_id = FL.feature_id 
     WHERE
       CVT.name = :type_name AND F.organism_id = :org_id AND FL.srcfeature_id = :chr
       $where_location
     ORDER BY FL.fmin
     ";
  $results = chado_query( $sql, $args);

  // filter the result by $ref_org
  // only the blocks in match ref_org will be exported
  $blocks = array();
  // the array syn_region used for store region information
  $syn_region = array(); 

  $sql = "SELECT S.blockid, S.b1, F.organism_id as org1, S.b2, T.organism_id as org2, S.score, S.evalue FROM synblock S
     LEFT JOIN chado.feature F ON S.b1 = F.feature_id
     LEFT JOIN chado.feature T ON S.b2 = T.feature_id 
     WHERE S.b1=:bid OR S.b2=:bid";

  $sql_loc = "SELECT FL.srcfeature_id, FL.feature_id, FL.fmin, FL.fmax, FL.strand FROM chado.featureloc FL
    WHERE FL.feature_id = :feature_id";

  foreach ($results as $r) {
    $args = array(':bid' => $r->feature_id);
    $res = chado_query($sql, $args);
    foreach ($res as $b) {
      // filter the reference organism
      if ( (array_key_exists($b->org1, $ref_org) and $b->org2 == $org_id) or 
           (array_key_exists($b->org2, $ref_org) and $b->org1 == $org_id) ) {
        if ($b->b1 == $r->feature_id) {
          $b->b1_org    = $org_opts[$b->org1];
          $b->b1_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org1][$r->srcfeature_id];
          $b->b1_fmin   = $r->fmin;
          $b->b1_fmax   = $r->fmax;
          $b->b1_strand = $r->strand;

          $loc2 = chado_query($sql_loc, array(':feature_id'=>$b->b2))->fetchObject();
          $b->b2_org    = $org_opts[$b->org2];
          $b->b2_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org2][$loc2->srcfeature_id];
          $b->b2_fmin   = $loc2->fmin;
          $b->b2_fmax   = $loc2->fmax;
          $b->b2_strand = $loc2->strand;
        }
        else {
          $loc1 = chado_query($sql_loc, array(':feature_id'=>$b->b1))->fetchObject();
          $b->b1_org    = $org_opts[$b->org1];
          $b->b1_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org1][$loc1->srcfeature_id];
          $b->b1_fmin   = $loc1->fmin;
          $b->b1_fmax   = $loc1->fmax;
          $b->b1_strand = $loc1->strand;

          $b->b2_org    = $org_opts[$b->org2];
          $b->b2_sid    = $_SESSION['tripal_synview_search']['REF'][$b->org2][$r->srcfeature_id];
          $b->b2_fmin   = $r->fmin;
          $b->b2_fmax   = $r->fmax;
          $b->b2_strand = $r->strand;
        }
        $blocks[$b->blockid] = $b;
      }
    }
  }

  // find overlapped blocks and generate clusters
  // step 1 : generate pairs of blocks that overlapped
  $paired = array();
  foreach ($blocks as $ba) {
    foreach ($blocks as $bb) {

      if ($ba->blockid == $bb->blockid) {
        continue; // skip the block with same ID
      }

      // compare all 4 possiable overlapped region
      if ($ba->org1 == $bb->org1 and $ba->org1 == $org_id and $ba->b1_sid == $bb->b1_sid) {
        if (($ba->b1_fmin < $bb->b1_fmin and $ba->b1_fmax > $bb->b1_fmin) or 
            ($ba->b1_fmin < $bb->b1_fmax and $ba->b1_fmax > $bb->b1_fmax)) {
           $paired[] = array($ba->blockid, $bb->blockid);
        }
      }

      if ($ba->org1 == $bb->org2 and $ba->org1 == $org_id and $ba->b1_sid == $bb->b2_sid) {
        if (($ba->b1_fmin < $bb->b2_fmin and $ba->b1_fmax > $bb->b2_fmin) or
            ($ba->b1_fmin < $bb->b2_fmax and $ba->b1_fmax > $bb->b2_fmax)) {
           $paired[] = array($ba->blockid, $bb->blockid);
        }
      }

      if ($ba->org2 == $bb->org1 and $ba->org2 == $org_id and $ba->b2_sid == $bb->b1_sid) {
        if (($ba->b2_fmin < $bb->b1_fmin and $ba->b2_fmax > $bb->b1_fmin) or
            ($ba->b2_fmin < $bb->b1_fmax and $ba->b2_fmax > $bb->b1_fmax)) {
           $paired[] = array($ba->blockid, $bb->blockid);
        }
      }

      if ($ba->org2 == $bb->org2 and $ba->org2 == $org_id and $ba->b2_sid == $bb->b2_sid) {
        if (($ba->b2_fmin < $bb->b2_fmin and $ba->b2_fmax > $bb->b2_fmin) or
            ($ba->b2_fmin < $bb->b2_fmax and $ba->b2_fmax > $bb->b2_fmax)) {
           $paired[] = array($ba->blockid, $bb->blockid);
        }
      }
    }
  }

  // step 2 : convert paired array to cluster  
  $cluster = array();
  $cluster_num = 1;
  $blocks_left = $blocks;

  if (sizeof($paired) > 0) {
    $first_pair = array_shift($paired);
    $cluster[$cluster_num] = $first_pair;
    unset($blocks_left[$first_pair[0]]);
    unset($blocks_left[$first_pair[1]]);
    foreach ($paired as $p) {
      $exit = 0;
      foreach ($cluster as $key => $value) {
        if (in_array($p[0], $value) and !in_array($p[1], $value)) {
          array_push($value, $p[1]);
          $cluster[$key] = $value;
          unset($blocks_left[$p[1]]);
          $exit = 1;
          break;
        }
        elseif (!in_array($p[0], $value) and in_array($p[1], $value)) {
          array_push($value, $p[0]);
          unset($blocks_left[$p[0]]);
          $exit = 1;
          break;
        }
        elseif (in_array($p[0], $value) and in_array($p[1], $value)) {
          $exit = 1;
          break;
        }
      }

      if ($exit == 0) { 
        $cluster_num++;
        $cluster[$cluster_num] = $p;
        unset($blocks_left[$p[0]]);
        unset($blocks_left[$p[1]]);
      }
    }
  }

  if (sizeof($blocks_left) > 0) {
    foreach ($blocks_left as $bid => $b) {
      $cluster_num++;
      $cluster[$cluster_num] = array($bid);
    }
  }

  if (count($blocks) > 1 || count($blocks) == 0) {
    return theme('synview_search_result', array('cluster'=> $cluster, 'blocks' => $blocks));
  }
  else {
    //return theme('synview_search_result', array('blocks' => $blocks)); 
    $block_id = $blocks[0]->blockid;
    drupal_goto("synview/block/$block_id");
  } 
}

/**
 * load synteny blocks of synteny file into chado database
 * 
 * @param $node
 * 
 * generate job args, then trigger a tripal job for parsing synteny file and loading blocks
 */
function synteny_file_load_job($node) 
{
  global $user;
  if ($node->syn_name) {
    $job_args = array(
      $node->syn_org1,
      $node->syn_org2,
      $node->syn_path,
    );
    tripal_add_job("Parse synteny file: $node->syn_path", 'tripal_synview',
      'synview_parse_synfile', $job_args, $user->uid);
  }
}

